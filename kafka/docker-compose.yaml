networks: 
  kafka:


services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    hostname: zookeeper
    container_name: kafka-zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka

  kafka-broker1:
    image: confluentinc/cp-kafka:7.0.0
    hostname: kafka-broker1
    container_name: kafka-broker1
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    depends_on:
      - zookeeper
    networks:
      - kafka

  kafka-broker2:
    image: confluentinc/cp-kafka:7.0.0
    hostname: kafka-broker2
    container_name: kafka-broker2
    ports:
      - 29192:29192
      - 9192:9192
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker2:29192,PLAINTEXT_HOST://localhost:9192
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    depends_on:
      - zookeeper
    networks:
      - kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.0
    hostname: schema-registry
    container_name: kafka-schema-registry
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-broker1:29092,kafka-broker2:29192"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - kafka-broker1
      - kafka-broker2
    networks:
      - kafka

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.0.0
    container_name: kafka-connect
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka-broker1:29092,kafka-broker2:29192"
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _kafka-connect-01-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _kafka-connect-01-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _kafka-connect-01-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components,/local-connect-jars,/usr/share/confluent-hub-components/confluentinc-kafka-connect-s3'
      KAFKA_HEAP_OPTS: '-Xmx2G'
    depends_on:
      - kafka-broker1
      - kafka-broker2
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install --no-prompt confluentinc/kafka-connect-s3:10.5.17
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.5.4
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run
    networks:
      - kafka

  # commercial
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.0.0
    hostname: control-center
    container_name: kafka-control-center
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka-broker1:29092,kafka-broker2:29192"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_CONNECT_DEVELOPMENT_CLUSTER: "http://kafka-connect:8083"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    depends_on:
      - kafka-broker1
      - kafka-broker2
      - schema-registry
    networks:
      - kafka

  # sgbd
  postgres:
    image: postgres:14.0
    container_name: kafka-postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    volumes:
      - ./initdb.d:/docker-entrypoint-initdb.d
    command: postgres -c log_min_error_statement=fatal -c wal_level=logical -c max_wal_senders=10 -c max_replication_slots=1
    networks:
      - kafka

  pgadmin:
    image: dpage/pgadmin4:6.4
    container_name: kafka-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - 8080:80
    networks:
      - kafka

  # simulate s3 storage
  minio:
    image: minio/minio
    container_name: kafka-minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: user
      MINIO_ROOT_PASSWORD: password
    command: server /data --console-address ":9001"
    networks:
      - kafka
  # web ui access
  # minioadmin:minioadmin

  minio-mc:
    image: minio/mc
    container_name: mc
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5
    depends_on:
      - minio
    networks:
      - kafka
    entrypoint: >
      /bin/sh -c "
      echo "Waiting for minio service to startup...";
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 user password;
      /usr/bin/mc admin user svcacct add           \
      --access-key "myuserserviceaccount"          \
      --secret-key "myuserserviceaccountpassword"  \
      myminio user;
      /usr/bin/mc mb --with-versioning myminio/lake-raw-zone;
      exit 0;
      "
    # docker run -it --rm --entrypoint=/bin/sh --network=kafka_kafka minio/mc
